from __future__ import print_function
import sys

from time import sleep
from sys import argv
from requests import post, get
from requests.auth import HTTPBasicAuth
from os import environ

from datetime import timedelta
from delorean import Delorean

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


class Vultr():
    def __init__(self, filename):
        """

        :param filename: of file that holds the API token
        """
        self.filename = filename
        self.url = 'https://api.vultr.com/v1'

    def vultr_post(self, endpoint, data):
        result = None
        headers = {'api_key': open(self.filename).read().strip()}
        response = post(self.url+endpoint, params=headers, data=data, timeout=60)
        try:
            json_object = response.json()
        except ValueError, e:
            result = response
        else:
            result = response.json()
        return result

    def vultr_get(self, endpoint, data):
        result = None
        data['api_key'] = open(self.filename).read().strip()
        response = get(self.url + endpoint, params=data)
        try:
            json_object = response.json()
        except ValueError, e:
            result = response
        else:
            result = response.json()
        return result


class Server:
    IPs = {} # key IP, value datetime created in delorean format

    def create(self, label):
        """
        Creates a new vm at vultr. Usually it takes 2 minutes.
        :param label:
        :return: ip
        """
        v = Vultr('token')
        data = {
            'DCID':9,             # data center at Frankfurt
            'VPSPLANID':29,       # 768 MB RAM,15 GB SSD,1.00 TB BW
            'OSID':215,           # virtualbox running ubuntu 16.04 x64
            'label':label,        #
            'SSHKEYID':'5794ed3c1ce42' # github key. This is not supported by vultr python-api nor by docker-machine.
        }                         # it takes about 2 minutes whereas docker-machine takes more and has more dependencies
                                  # it allows us to ssh to the new machine without reading the autogenerated password from vultr site
                                  # but it does not allow us to push to the git repo from that machine
        if label.startswith('test'):
            data['notify_activate'] = 'no'
        response = v.vultr_post('/server/create', data)
        startuptime = Delorean()
        self.id = response['SUBID']
        for i in range((30)):
            srv = v.vultr_get('/server/list', {'SUBID': self.id})
            if srv['power_status'] == 'running' and srv['main_ip'] != '0' and srv['default_password'] != '':
                eprint("Waiting for ssh to become available and dpkg to become unlocked so that we can apt-get install")
                sleep(10)
                ip = srv['main_ip']
                self.IPs[ip] = startuptime
                return ip
            eprint("Waiting for vultr to create server")
            sleep(10)
        assert False, 'Failed to get status of new server within 5 minutes'

    def destroy(self, ip):
        while True:
            if Delorean() - startuptime < timedelta(minutes=5):
	        sleep(10)
            else:
                v = Vultr('token')
                response = v.vultr_post('/server/destroy', {'SUBID': self.id})
                assert response.status_code == 200, "Failed to destroy server with id %d" % self.id
                break


def main():
    s = Server()
    IPs = []
    for label in range(2):
        IPs.append(s.create(str(label)))
    for ip in IPs:
        s.destroy(ip)


if __name__ == "__main__":
    main()
