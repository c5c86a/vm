from __future__ import print_function
import sys

from time import sleep
from sys import argv
from requests import post, get
from requests.auth import HTTPBasicAuth
from os import environ

from datetime import timedelta
from delorean import Delorean
###################################
from subprocess import Popen

from fabric.api import env
from fabric.operations import run, put


def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


class VultrAPI():
    def __init__(self, filename):
        """

        :param filename: of file that holds the API token
        """
        self.filename = filename
        self.url = 'https://api.vultr.com/v1'

    def vultr_post(self, endpoint, data):
        result = None
        headers = {'api_key': open(self.filename).read().strip()}
        response = post(self.url+endpoint, params=headers, data=data, timeout=60)
        try:
            json_object = response.json()
        except ValueError, e:
            result = response
        else:
            result = response.json()
        return result

    def vultr_get(self, endpoint, data):
        result = None
        data['api_key'] = open(self.filename).read().strip()
        response = get(self.url + endpoint, params=data)
        try:
            json_object = response.json()
        except ValueError, e:
            result = response
        else:
            result = response.json()
        return result


class Server:
    ip = None
    startuptime = None

    def create(self, label):
        """
        Creates a new vm at vultr. Usually it takes 2 minutes.
        :param label:
        :return: ip
        """
        v = VultrAPI('token')
        data = {
            'DCID':9,             # data center at Frankfurt
            'VPSPLANID':29,       # 768 MB RAM,15 GB SSD,1.00 TB BW
            'OSID':215,           # virtualbox running ubuntu 16.04 x64
            'label':label,        #
            'SSHKEYID':'5794ed3c1ce42' # github key. This is not supported by vultr python-api nor by docker-machine.
        }                         # it takes about 2 minutes whereas docker-machine takes more and has more dependencies
                                  # it allows us to ssh to the new machine without reading the autogenerated password from vultr site
                                  # but it does not allow us to push to the git repo from that machine
        if label.startswith('test'):
            data['notify_activate'] = 'no'
        response = v.vultr_post('/server/create', data)
        self.startuptime = Delorean()
        self.id = response['SUBID']
        while True:
            if Delorean() - self.startuptime < timedelta(minutes=10):
                srv = v.vultr_get('/server/list', {'SUBID': self.id})
                if srv['power_status'] == 'running' and srv['main_ip'] != '0' and srv['default_password'] != '':
                    eprint("Waiting for ssh to become available and dpkg to become unlocked so that we can apt-get install")
                    sleep(10)
                    self.ip = srv['main_ip']
                    break
                eprint("Waiting for vultr to create server")
                sleep(10)
            else:
                assert False, 'Failed to get status of new server within 5 minutes'
        return self.ip

    def destroy(self):
        while True:
            if Delorean() - self.startuptime < timedelta(minutes=5):
	        sleep(10)
            else:
                v = VultrAPI('token')
                response = v.vultr_post('/server/destroy', {'SUBID': self.id})
                assert response.status_code == 200, "Failed to destroy server with id %d" % self.id
                break


class SSH2VM:
    def __init__(self, ip):
        self.ip = ip
        env.hosts = [ip]
        env.user = 'root'
        env.key_filename = 'key'
    def is_reachable(self):
        result = false
        command = 'date'
        array = ["ssh",
               "-i", "key",
               "-o", "StrictHostKeyChecking=no",
               "-o", "KbdInteractiveDevices=no",
               "-o", "BatchMode=yes",
               "%s@%s" % ('root', self.ip)]
        array.append(command.split(' '))

        first_atttempt = Delorean()
        while True:
            if Delorean() - first_attempt < timedelta(minutes=5):
	        sleep(10)
            else:
                pid = Popen(array, stdout=PIPE, stderr=PIPE)
                out, err = pid.communicate()                         # executes command
                if pid.returncode==0:
                    result = true
                    break
        return result
    def copy(local_path):
       put(local_path, '')


def main():
    s = Server()
    ip = s.create('travis')
    vm = SSH2VM(ip)
    if vm.is_reachable():
        print('is reachable')
        vm.copy('deploy/smsc.sh')
    else:
        print('is not reachable')
    s.destroy_node()


if __name__ == "__main__":
    main()
